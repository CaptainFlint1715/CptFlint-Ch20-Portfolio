{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chans\\\\bootcamp\\\\CHALLENGES\\\\20_Challenge-React\\\\src\\\\components\\\\Contact.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { validateEmail } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Contact() {\n  _s();\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [nameOf, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [errorMessage, setError] = useState('');\n  const handleInputChange = e => {\n    // Getting the value and name of the input which triggered the change\n    const {\n      target\n    } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      setEmail(inputValue);\n      // First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\n      if (!validateEmail(inputValue)) {\n        setError('Email is invalid');\n        // We want to exit out of this code block if something is wrong so that the user can correct it\n        return;\n      } else {\n        setError('');\n      }\n    } else if (inputType === 'message') {\n      setMessage(inputValue);\n    } else if (inputType === 'nameof') {\n      setName(inputValue);\n    }\n  };\n  const handleBlur = e => {\n    const {\n      target\n    } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n    if (inputValue === '' && inputType === 'email') {\n      setError('Email is required');\n    } else if (inputValue === '' && inputType === 'nameof') {\n      setError('Name is required');\n    } else if (inputValue === '' && inputType === 'message') {\n      setError('Message is required');\n    } else {\n      setError('');\n    }\n  };\n  const handleFormSubmit = e => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setMessage('');\n    setName('');\n    setEmail('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: email,\n          name: \"email\",\n          onChange: handleInputChange,\n          onBlur: handleBlur,\n          type: \"email\",\n          placeholder: \"email\",\n          className: \"text-black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: nameOf,\n          name: \"nameof\",\n          onChange: handleInputChange,\n          onBlur: handleBlur,\n          type: \"text\",\n          placeholder: \"name\",\n          className: \"text-black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          value: message,\n          name: \"message\",\n          onChange: handleInputChange,\n          onBlur: handleBlur,\n          type: \"text\",\n          placeholder: \"message\",\n          className: \"text-black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"text-black mb-\",\n        type: \"button\",\n        onClick: handleFormSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text text-black\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Contact, \"KbBd7KOilPDyAiKRyk6DppqMrdo=\");\n_c = Contact;\nexport default Contact;\nvar _c;\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["React","useState","validateEmail","jsxDEV","_jsxDEV","Contact","_s","email","setEmail","nameOf","setName","message","setMessage","errorMessage","setError","handleInputChange","e","target","inputType","name","inputValue","value","handleBlur","handleFormSubmit","preventDefault","className","children","onChange","onBlur","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/chans/bootcamp/CHALLENGES/20_Challenge-React/src/components/Contact.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { validateEmail } from '../utils/helpers'\r\n\r\nfunction Contact() {\r\n    // Create state variables for the fields in the form\r\n    // We are also setting their initial values to an empty string\r\n    const [email, setEmail] = useState('');\r\n    const [nameOf, setName] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [errorMessage, setError] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        // Getting the value and name of the input which triggered the change\r\n        const { target } = e;\r\n        const inputType = target.name;\r\n        const inputValue = target.value;\r\n\r\n        // Based on the input type, we set the state of either email, username, and password\r\n        if (inputType === 'email') {\r\n            setEmail(inputValue);\r\n            // First we check to see if the email is not valid or if the userName is empty. If so we set an error message to be displayed on the page.\r\n            if (!validateEmail(inputValue)) {\r\n                setError('Email is invalid');\r\n                // We want to exit out of this code block if something is wrong so that the user can correct it\r\n                return;\r\n            } else {\r\n                setError('')\r\n            }\r\n        } else if (inputType === 'message') {\r\n            setMessage(inputValue);\r\n        } else if (inputType === 'nameof') {\r\n            setName(inputValue)\r\n        }\r\n    };\r\n\r\n    const handleBlur = (e) => {\r\n        const { target } = e;\r\n        const inputType = target.name;\r\n        const inputValue = target.value;\r\n\r\n        if (inputValue === '' && inputType === 'email') {\r\n            setError('Email is required');\r\n        } else if (inputValue === '' && inputType === 'nameof') {\r\n            setError('Name is required');\r\n        } else if (inputValue === '' && inputType === 'message') {\r\n            setError('Message is required');\r\n        } else {\r\n            setError('');\r\n        }\r\n    }\r\n\r\n    const handleFormSubmit = (e) => {\r\n        // Preventing the default behavior of the form submit (which is to refresh the page)\r\n        e.preventDefault();\r\n\r\n        // If everything goes according to plan, we want to clear out the input after a successful registration.\r\n        setMessage('');\r\n        setName('');\r\n        setEmail('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex justify-center items-center h-screen\">\r\n            <form className=\"form bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\r\n                <div className=\"mb-4\">\r\n                    <input\r\n                        value={email}\r\n                        name=\"email\"\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleBlur}\r\n                        type=\"email\"\r\n                        placeholder=\"email\"\r\n                        className=\"text-black\"\r\n                    />\r\n                </div>\r\n                <div className=\"mb-4\">\r\n                    <input\r\n                        value={nameOf}\r\n                        name=\"nameof\"\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleBlur}\r\n                        type=\"text\"\r\n                        placeholder=\"name\"\r\n                        className=\"text-black\"\r\n                    />\r\n                </div>\r\n                <div className=\"mb-4\">\r\n                    <input\r\n                        value={message}\r\n                        name=\"message\"\r\n                        onChange={handleInputChange}\r\n                        onBlur={handleBlur}\r\n                        type=\"text\"\r\n                        placeholder=\"message\"\r\n                        className=\"text-black\"\r\n                    />\r\n                </div>\r\n                <button className=\"text-black mb-\" type=\"button\" onClick={handleFormSubmit}>Submit</button>\r\n                {errorMessage && (\r\n                <div>\r\n                    <p className=\"error-text text-black\">{errorMessage}</p>\r\n                </div>\r\n            )}\r\n            </form>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Contact;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}